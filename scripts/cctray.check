#!/usr/bin/env ruby
require 'rubygems'
require 'open-uri'
require 'nokogiri'
require 'net/https'
require 'json'
require 'webrick'

class CCTrayMultiProjectStatus
  def initialize(projects)
    @projects = projects
  end

  def as_json(*)
    {
      :result   => @projects.all? { |p| p.attr('lastBuildStatus') == "Success" },
      :changing => @projects.any? { |p| p.attr('activity')        == "Building" },
    }
  end

  def to_json(*)
    JSON.dump(as_json)
  end
end

class CCTray
  def initialize(feed_url, pipeline, stage=nil, job=nil)
    feed_uri = URI(WEBrick::HTTPUtils.escape(feed_url))
    username = feed_uri.user
    password = feed_uri.password

    feed_uri.user     = nil
    feed_uri.password = nil

    username = WEBrick::HTTPUtils.unescape(username) if username
    password = WEBrick::HTTPUtils.unescape(password) if password

    @feed     = Nokogiri::XML(open(feed_uri, :http_basic_authentication => [username, password]))
    @pipeline = pipeline
    @stage    = stage
    @job      = job
  end

  def latest_status
    projects = exact_match
    projects = partial_match if projects.empty?

    CCTrayMultiProjectStatus.new(projects)
  end

  def partial_match
    name = name = [@pipeline, @stage, @job].compact.join(" :: ").downcase

    @feed.xpath('//Project').select do |proj|
      proj.attr('name').downcase.include?(name)
    end
  end

  def exact_match
    @feed.xpath('//Project').select do |proj|
      proj_pipeline, proj_stage, proj_job, _ = proj.attr('name').split(' :: ')
      [ [ @pipeline, @stage, @job ], [ proj_pipeline, proj_stage, proj_job ]].transpose.all? do |attribute_to_compare, proj_attribute|
        attribute_to_compare.nil? || 
          (!proj_attribute.nil? && attribute_to_compare.downcase == proj_attribute.downcase)
      end
    end
  end
end

puts CCTray.new(*ARGV).latest_status.to_json if __FILE__ == $0
